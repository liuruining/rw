package com.liuruining.model.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import com.liuruining.model.dao.Word;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table word.
*/
public class WordDao extends AbstractDao<Word, Long> {

    public static final String TABLENAME = "word";

    /**
     * Properties of entity Word.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "ID");
        public final static Property Spelling = new Property(1, String.class, "spelling", false, "SPELLING");
        public final static Property Meanning = new Property(2, String.class, "meanning", false, "MEANNING");
        public final static Property Phonetic_alphabet = new Property(3, String.class, "phonetic_alphabet", false, "PHONETIC_ALPHABET");
        public final static Property List = new Property(4, Long.class, "list", false, "LIST");
    };


    public WordDao(DaoConfig config) {
        super(config);
    }
    
    public WordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'word' (" + //
                "'ID' INTEGER PRIMARY KEY ," + // 0: ID
                "'SPELLING' TEXT," + // 1: spelling
                "'MEANNING' TEXT," + // 2: meanning
                "'PHONETIC_ALPHABET' TEXT," + // 3: phonetic_alphabet
                "'LIST' INTEGER);"); // 4: list
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'word'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Word entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String spelling = entity.getSpelling();
        if (spelling != null) {
            stmt.bindString(2, spelling);
        }
 
        String meanning = entity.getMeanning();
        if (meanning != null) {
            stmt.bindString(3, meanning);
        }
 
        String phonetic_alphabet = entity.getPhonetic_alphabet();
        if (phonetic_alphabet != null) {
            stmt.bindString(4, phonetic_alphabet);
        }
 
        Long list = entity.getList();
        if (list != null) {
            stmt.bindLong(5, list);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Word readEntity(Cursor cursor, int offset) {
        Word entity = new Word( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // spelling
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // meanning
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // phonetic_alphabet
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4) // list
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Word entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSpelling(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMeanning(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPhonetic_alphabet(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setList(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Word entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Word entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
