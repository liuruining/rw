package com.liuruining.model.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import com.liuruining.model.dao.Book;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table BOOKS.
*/
public class BookDao extends AbstractDao<Book, String> {

    public static final String TABLENAME = "BOOKS";

    /**
     * Properties of entity Book.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ID = new Property(0, String.class, "ID", true, "ID");
        public final static Property NAME = new Property(1, String.class, "NAME", false, "NAME");
        public final static Property NUMOFLIST = new Property(2, Long.class, "NUMOFLIST", false, "NUMOFLIST");
        public final static Property NUMOFWORD = new Property(3, Long.class, "NUMOFWORD", false, "NUMOFWORD");
    };


    public BookDao(DaoConfig config) {
        super(config);
    }
    
    public BookDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'BOOKS' (" + //
                "'ID' TEXT PRIMARY KEY NOT NULL ," + // 0: ID
                "'NAME' TEXT," + // 1: NAME
                "'NUMOFLIST' INTEGER," + // 2: NUMOFLIST
                "'NUMOFWORD' INTEGER);"); // 3: NUMOFWORD
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'BOOKS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Book entity) {
        stmt.clearBindings();
 
        String ID = entity.getID();
        if (ID != null) {
            stmt.bindString(1, ID);
        }
 
        String NAME = entity.getNAME();
        if (NAME != null) {
            stmt.bindString(2, NAME);
        }
 
        Long NUMOFLIST = entity.getNUMOFLIST();
        if (NUMOFLIST != null) {
            stmt.bindLong(3, NUMOFLIST);
        }
 
        Long NUMOFWORD = entity.getNUMOFWORD();
        if (NUMOFWORD != null) {
            stmt.bindLong(4, NUMOFWORD);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Book readEntity(Cursor cursor, int offset) {
        Book entity = new Book( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // NAME
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // NUMOFLIST
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3) // NUMOFWORD
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Book entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setNAME(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNUMOFLIST(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setNUMOFWORD(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Book entity, long rowId) {
        return entity.getID();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Book entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
