package com.liuruining.model.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import com.liuruining.model.dao.WordLocation;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table word_location.
*/
public class WordLocationDao extends AbstractDao<WordLocation, Long> {

    public static final String TABLENAME = "word_location";

    /**
     * Properties of entity WordLocation.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "ID");
        public final static Property Book = new Property(1, Integer.class, "book", false, "BOOK");
        public final static Property Index = new Property(2, Integer.class, "index", false, "INDEX");
    };


    public WordLocationDao(DaoConfig config) {
        super(config);
    }
    
    public WordLocationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'word_location' (" + //
                "'ID' INTEGER PRIMARY KEY ," + // 0: ID
                "'BOOK' INTEGER," + // 1: book
                "'INDEX' INTEGER);"); // 2: index
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'word_location'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, WordLocation entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        Integer book = entity.getBook();
        if (book != null) {
            stmt.bindLong(2, book);
        }
 
        Integer index = entity.getIndex();
        if (index != null) {
            stmt.bindLong(3, index);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public WordLocation readEntity(Cursor cursor, int offset) {
        WordLocation entity = new WordLocation( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // book
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2) // index
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, WordLocation entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBook(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setIndex(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(WordLocation entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(WordLocation entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
